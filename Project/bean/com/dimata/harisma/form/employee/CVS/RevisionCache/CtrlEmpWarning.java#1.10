package com.dimata.harisma.form.employee;

// import java
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

// import dimata
import com.dimata.util.*;
import com.dimata.util.lang.*;

// import qdep
import com.dimata.qdep.db.*;
import com.dimata.qdep.form.*;
import com.dimata.qdep.system.*;

// import project
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.entity.log.I_LogHistory;
import com.dimata.harisma.entity.log.LogSysHistory;
import com.dimata.harisma.entity.log.PstLogSysHistory;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.system.entity.PstSystemProperty;

/**
 *
 * @author bayu
 */
public class CtrlEmpWarning extends Control implements I_Language {

    public static int RSLT_OK = 0;
    public static int RSLT_UNKNOWN_ERROR = 1;
    public static int RSLT_EST_CODE_EXIST = 2;
    public static int RSLT_FORM_INCOMPLETE = 3;

    public static String[][] resultText = {
        {"Berhasil", "Tidak dapat diproses", "Kode sudah ada", "Data tidak lengkap"},
        {"Success", "Can not process", "Code exist", "Data incomplete"}
    };

    private int start;
    private String msgString;
    private int language;
    private EmpWarning warning;
    private PstEmpWarning pstWarning;
    private FrmEmpWarning frmWarning;

    public CtrlEmpWarning(HttpServletRequest request) {
        msgString = "";
        language = LANGUAGE_DEFAULT;
        warning = new EmpWarning();

        try {
            pstWarning = new PstEmpWarning(0);
        } catch (Exception e) {
        }

        frmWarning = new FrmEmpWarning(request, warning);
    }

    public int getStart() {
        return start;
    }

    public String getMessage() {
        return msgString;
    }

    public EmpWarning getEmpWarning() {
        return warning;
    }

    public FrmEmpWarning getForm() {
        return frmWarning;
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    private String getSystemMessage(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                frmWarning.addError(frmWarning.FRM_FIELD_EMPLOYEE_ID, resultText[language][RSLT_EST_CODE_EXIST]);
                return resultText[language][RSLT_EST_CODE_EXIST];
            default:
                return resultText[language][RSLT_UNKNOWN_ERROR];
        }
    }

    private int getControlMsgId(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                return RSLT_EST_CODE_EXIST;
            default:
                return RSLT_UNKNOWN_ERROR;
        }
    }

    public int action(int cmd, long oid, HttpServletRequest request, String loginName, long userId) {
        msgString = "";
        int excCode = I_DBExceptionInfo.NO_EXCEPTION;
        int rsCode = RSLT_OK;
        int sysLog = Integer.parseInt(String.valueOf(PstSystemProperty.getPropertyLongbyName("SET_USER_ACTIVITY_LOG")));
        //long sysLog = 1;
        String logDetail = "";
        String logPrev = "";
        String logCurr = "";
        Date nowDate = new Date();

        switch (cmd) {
            case Command.ADD:
                break;

            case Command.EDIT:
                if (oid != 0) {
                    try {
                        warning = PstEmpWarning.fetchExc(oid);

                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            case Command.SAVE:
                EmpWarning prevEmpWarning = null;
                if (oid != 0) {
                    try {
                        warning = PstEmpWarning.fetchExc(oid);
                        if (sysLog == 1) {
                        
                        prevEmpWarning = PstEmpWarning.fetchExc(oid);

                        }  
                    } catch (Exception exc) {
                    }
                }

                frmWarning.requestEntityObject(warning);

                if (frmWarning.errorSize() > 0) {
                    msgString = FRMMessage.getMsg(FRMMessage.MSG_INCOMPLATE);
                    return RSLT_FORM_INCOMPLETE;
                }

                if (warning.getOID() == 0) {    // insert
                    try {
                        long result = pstWarning.insertExc(this.warning);
                        
                        logDetail  = PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARNING_ID]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_EMPLOYEE_ID]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_FACT]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_DATE]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_BY]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_DATE]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_VALID_UNTIL]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_LEVEL_ID]+";";
                        
                        logCurr  = warning.getOID()+";";
                        logCurr += warning.getEmployeeId()+";";
                        logCurr += "'"+warning.getBreakFact()+"';";
                        logCurr += "'"+warning.getBreakDate()+"';";
                        logCurr += "'"+warning.getWarningBy()+"';";
                        logCurr += "'"+warning.getWarningDate()+"';";
                        logCurr += "'"+warning.getValidityDate()+"';";
                        logCurr += warning.getWarnLevelId()+";";

                        logPrev  = "-;";
                        logPrev += "-;";
                        logPrev += "-;";
                        logPrev += "-;";
                        logPrev += "-;";
                        logPrev += "-;";
                        logPrev += "-;";
                        logPrev += "-;";            
                        
                        if (sysLog == 1) {
                            String className = warning.getClass().getName();

                            LogSysHistory logSysHistory = new LogSysHistory();

                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + warning.getEmployeeId();
                            /*
                            if (warning.getBreakDate() != null) {
                                logCurr += "BREAK_DATE='" + warning.getBreakDate() + "';";
                            }
                            if (warning.getBreakFact() != null) {
                                logCurr += "BREAK_FACT='" + warning.getBreakFact() + "';";
                            }
                            if (warning.getWarningDate() != null) {
                                logCurr += "WARN_DATE='" + warning.getWarningDate() + "';";
                            }
                            if (warning.getWarnLevelId() != 0) {
                                Warning warningLvl = PstWarning.fetchExc(warning.getWarnLevelId());
                                logCurr += "WARN_LEVEL_ID=[" + warning.getWarnLevelId() + "]" + warningLvl.getWarnDesc() + ";";
                            }
                            if (warning.getWarningBy() != null) {
                                logCurr += "WARN_BY='" + warning.getWarningBy() + "';";
                            }
                            if (warning.getValidityDate() != null) {
                                logCurr += "VALID_UNTIL='" + warning.getValidityDate() + "';";
                            }
                            */
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("ADD"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            logSysHistory.setLogDetail(logDetail); // apa yang dirubah
                            logSysHistory.setLogModule("Employee Warning");
                            logSysHistory.setLogPrev(logPrev);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogStatus(0);
                            logSysHistory.setLogEditedUserId(warning.getEmployeeId());

                            PstLogSysHistory.insertExc(logSysHistory);
                        }
                        
                        
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                        return getControlMsgId(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                        return getControlMsgId(I_DBExceptionInfo.UNKNOWN);
                    }

                } else {
                    try {
                        long result = pstWarning.updateExc(this.warning);

                        // logHistory
                        if (sysLog == 1) {
                            warning = PstEmpWarning.fetchExc(oid);

                            if (warning != null && prevEmpWarning != null) {
                                if(warning.getCompanyId() != prevEmpWarning.getCompanyId()){
                                    Company company = PstCompany.fetchExc(warning.getCompanyId());
                                    Company prevCompany = PstCompany.fetchExc(prevEmpWarning.getCompanyId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_COMPANY_ID]+";";
                                    logPrev += "[" + prevEmpWarning.getCompanyId() + "]" + prevCompany.getCompany() +";";
                                    logCurr += "[" + warning.getCompanyId() + "]" + company.getCompany() +";";
                                }
                                if(warning.getDivisionId() != prevEmpWarning.getDivisionId()){
                                    Division division = PstDivision.fetchExc(warning.getDivisionId());
                                    Division prevDivision = PstDivision.fetchExc(prevEmpWarning.getDivisionId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_DIVISION_ID]+";";
                                    logPrev += "[" + prevEmpWarning.getDivisionId() +"]" + prevDivision.getDivision() +";";
                                    logCurr += "[" + warning.getCompanyId() + "]" + division.getDivision() +";";
                                }
                                if(warning.getDepartmentId() != prevEmpWarning.getDepartmentId()){
                                    Department department = PstDepartment.fetchExc(warning.getDepartmentId());
                                    Department prevDepartment = PstDepartment.fetchExc(prevEmpWarning.getDepartmentId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_DEPARTMENT_ID]+";";
                                    logPrev += "["+ prevEmpWarning.getDepartmentId()+"]"+department.getDepartment()+";";
                                    logCurr += "["+ warning.getDepartmentId()+"]"+ prevDepartment.getDepartment()+";";
                                }
                                if(warning.getSectionId() != prevEmpWarning.getSectionId()){
                                    Section section = PstSection.fetchExc(warning.getSectionId());
                                    Section prevSection = PstSection.fetchExc(prevEmpWarning.getSectionId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_SECTION_ID];
                                    logPrev += "[" + prevEmpWarning.getSectionId()+"]"+section.getSection()+";";
                                    logCurr += "[" + warning.getSectionId()+"]"+prevSection.getSection()+";";
                                }
                                if(warning.getPositionId() != prevEmpWarning.getPositionId()){
                                    Position position = PstPosition.fetchExc(warning.getPositionId());
                                    Position prevPosition = PstPosition.fetchExc(prevEmpWarning.getPositionId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_POSITION_ID];
                                    logPrev += "[" + prevEmpWarning.getPositionId()+"]"+position.getPosition()+";";
                                    logCurr += "[" + warning.getPositionId()+"]"+prevPosition.getPosition()+";";
                                }
                                if(warning.getLevelId() != prevEmpWarning.getLevelId()){
                                    Level level = PstLevel.fetchExc(warning.getLevelId());
                                    Level prevLevel = PstLevel.fetchExc(prevEmpWarning.getLevelId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_LEVEL_ID];
                                    logPrev += "[" + prevEmpWarning.getLevelId()+"]"+level.getLevel()+";";
                                    logCurr += "[" + warning.getLevelId()+"]"+prevLevel.getLevel()+";";
                                }
                                if(warning.getEmpCategoryId() != prevEmpWarning.getEmpCategoryId()){
                                    EmpCategory empCat = PstEmpCategory.fetchExc(warning.getEmpCategoryId());
                                    EmpCategory prevEmpCat = PstEmpCategory.fetchExc(prevEmpWarning.getEmpCategoryId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_EMP_CATEGORY_ID];
                                    logPrev += "["+prevEmpWarning.getEmpCategoryId()+"]"+empCat.getEmpCategory()+";";
                                    logCurr += "["+warning.getEmpCategoryId()+"]"+prevEmpCat.getEmpCategory()+";";
                                }
                                if (warning.getBreakDate() != null) {
                                    if (!warning.getBreakDate().equals(prevEmpWarning.getBreakDate())) {
                                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_DATE]+";";
                                        logPrev += "'" + prevEmpWarning.getBreakDate() + "';";
                                        logCurr += "'" + warning.getBreakDate() + "';";
                                    }
                                }
                                if (!warning.getBreakFact().equals(prevEmpWarning.getBreakFact())) {
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_FACT]+";";
                                    logPrev += "'" + prevEmpWarning.getBreakFact() + "';";
                                    logCurr += "'" + warning.getBreakFact() + "';";
                                }
                                if (warning.getWarningDate() != null) {
                                    if (!warning.getWarningDate().equals(prevEmpWarning.getWarningDate())) {
                                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_DATE]+";";
                                        logPrev += "'" + prevEmpWarning.getWarningDate() + "';";
                                        logCurr += "'" + warning.getWarningDate() + "';";
                                    }
                                }
                                if (warning.getWarnLevelId() != prevEmpWarning.getWarnLevelId()) {
                                    Warning warningLvl = PstWarning.fetchExc(warning.getWarnLevelId());
                                    Warning prevWarningLvl = PstWarning.fetchExc(prevEmpWarning.getWarnLevelId());
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_LEVEL_ID]+";";
                                    logPrev += "[" + prevEmpWarning.getWarnLevelId() + "]" + prevWarningLvl.getWarnDesc() + ";";
                                    logCurr += "[" + warning.getWarnLevelId() + "]" + warningLvl.getWarnDesc() + ";";
                                }
                                if (!warning.getWarningBy().equals(prevEmpWarning.getWarningBy())) {
                                    logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_BY]+";";
                                    logPrev += "'" + prevEmpWarning.getWarningBy() + "';";
                                    logCurr += "'" + warning.getWarningBy() + "';";
                                }
                                if (warning.getValidityDate() != null) {
                                    if (!warning.getValidityDate().equals(prevEmpWarning.getValidityDate())) {
                                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_VALID_UNTIL]+";";
                                        logPrev += "'" + prevEmpWarning.getValidityDate() + "';";
                                        logCurr += "'" + warning.getValidityDate() + "';";
                                    }
                                }
                                

                                String className = warning.getClass().getName();

                                LogSysHistory logSysHistory = new LogSysHistory();

                                String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + warning.getEmployeeId();

                                logSysHistory.setLogDocumentId(0);
                                logSysHistory.setLogUserId(userId);
                                logSysHistory.setApproverId(userId);
                                logSysHistory.setApproveDate(nowDate);
                                logSysHistory.setLogLoginName(loginName);
                                logSysHistory.setLogDocumentNumber("");
                                logSysHistory.setLogDocumentType(className); //entity
                                logSysHistory.setLogUserAction("EDIT"); // command
                                logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                                logSysHistory.setLogUpdateDate(nowDate);
                                logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                                logSysHistory.setLogDetail(logDetail); // apa yang dirubah
                                logSysHistory.setLogPrev(logPrev);
                                logSysHistory.setLogCurr(logCurr);
                                logSysHistory.setLogStatus(0);
                                logSysHistory.setLogModule("Employee Warning");
                                logSysHistory.setLogEditedUserId(warning.getEmployeeId());

                                PstLogSysHistory.insertExc(logSysHistory);
                            }
                        }

                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }

                }
                break;

            case Command.ASK:
                if (oid != 0) {
                    try {
                        msgString = FRMMessage.getMessage(FRMMessage.MSG_ASKDEL);
                        warning = PstEmpWarning.fetchExc(oid);
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            case Command.DELETE:
                if (oid != 0) {
                    try {

                        EmpWarning empWarning = PstEmpWarning.fetchExc(oid);
                        
                        logDetail  = PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARNING_ID]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_EMPLOYEE_ID]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_FACT]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_BREAK_DATE]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_BY]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_DATE]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_VALID_UNTIL]+";";
                        logDetail += PstEmpWarning.fieldNames[PstEmpWarning.FLD_WARN_LEVEL_ID]+";";
                        
                        /*Prev*/
                            logPrev  = empWarning.getOID()+";";
                        if(empWarning.getEmployeeId() != 0){
                            Employee employee = PstEmployee.fetchExc(empWarning.getEmployeeId());                            
                            logPrev += "["+empWarning.getEmployeeId()+"]"+employee.getFullName()+";";
                        }
                        else{
                            logPrev = empWarning.getEmployeeId()+";";
                        }
                            logPrev += "'"+empWarning.getBreakFact()+"';";
                            logPrev += "'"+empWarning.getBreakDate()+"';";
                            logPrev += "'"+empWarning.getWarningBy()+"';";
                            logPrev += "'"+empWarning.getWarningDate()+"';";
                            logPrev += "'"+empWarning.getValidityDate()+"';";
                        if(empWarning.getWarnLevelId() != 0){
                            Warning warningLvl = PstWarning.fetchExc(empWarning.getWarnLevelId());                            
                            logPrev += "["+empWarning.getWarnLevelId()+"]"+warningLvl.getWarnDesc()+";";
                        }
                        else{
                            logPrev += empWarning.getWarnLevelId()+";";
                        }
                            
                        logCurr  = "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";                        
                        
                        String empName = PstEmployee.getEmployeeName(warning.getEmployeeId());

                        long result = PstEmpWarning.deleteExc(oid);

                        if (sysLog == 1) {

                            String className = warning.getClass().getName();
                            LogSysHistory logSysHistory = new LogSysHistory();
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + empWarning.getEmployeeId();
                            
                            /*
                            if (warning.getBreakDate() != null) {
                                logPrev += "BREAK_DATE='" + warning.getBreakDate() + "';";
                            }
                            if (warning.getBreakFact() != null) {
                                logPrev += "BREAK_FACT='" + warning.getBreakFact() + "';";
                            }
                            if (warning.getWarningDate() != null) {
                                logPrev += "WARN_DATE='" + warning.getWarningDate() + "';";
                            }
                            if (warning.getWarnLevelId() != 0) {
                                Warning warningLvl = PstWarning.fetchExc(warning.getWarnLevelId());
                                logPrev += "WARN_LEVEL_ID=[" + warning.getWarnLevelId() + "]" + warningLvl.getWarnDesc() + ";";
                            }
                            if (warning.getWarningBy() != null) {
                                logPrev += "WARN_BY='" + warning.getWarningBy() + "';";
                            }
                            if (warning.getValidityDate() != null) {
                                logPrev += "VALID_UNTIL='" + warning.getValidityDate() + "';";
                            }
                            */
                            
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("DELETE"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            logSysHistory.setLogDetail(logDetail); // apa yang dirubah
                            logSysHistory.setLogStatus(0);
                            logSysHistory.setLogPrev(logPrev);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogModule("Employee Warning");
                            logSysHistory.setLogEditedUserId(warning.getEmployeeId());

                            PstLogSysHistory.insertExc(logSysHistory);

                        }

                        if (result != 0) {
                            msgString = FRMMessage.getMessage(FRMMessage.MSG_DELETED);
                            excCode = RSLT_OK;
                        } else {
                            msgString = FRMMessage.getMessage(FRMMessage.ERR_DELETED);
                            excCode = RSLT_FORM_INCOMPLETE;
                        }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
        }

        return rsCode;
    }
}
