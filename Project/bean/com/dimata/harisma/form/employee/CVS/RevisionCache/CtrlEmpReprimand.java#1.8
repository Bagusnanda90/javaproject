package com.dimata.harisma.form.employee;

// import java
import com.dimata.harisma.entity.admin.AppUser;
import com.dimata.harisma.entity.admin.PstAppUser;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

// import dimata
import com.dimata.util.*;
import com.dimata.util.lang.*;

// import qdep
import com.dimata.qdep.db.*;
import com.dimata.qdep.form.*;
import com.dimata.qdep.system.*;

// import project
import com.dimata.harisma.entity.employee.*;
import com.dimata.harisma.entity.log.I_LogHistory;
import com.dimata.harisma.entity.log.LogSysHistory;
import com.dimata.harisma.entity.log.PstLogSysHistory;
import com.dimata.harisma.entity.masterdata.PstReprimand;
import com.dimata.harisma.entity.masterdata.Reprimand;
import com.dimata.system.entity.PstSystemProperty;

/**
 *
 * @author bayu
 */
public class CtrlEmpReprimand extends Control implements I_Language {
    
    public static int RSLT_OK = 0;
    public static int RSLT_UNKNOWN_ERROR = 1;
    public static int RSLT_EST_CODE_EXIST = 2;
    public static int RSLT_FORM_INCOMPLETE = 3;
    public static String[][] resultText = {
        {"Berhasil", "Tidak dapat diproses", "Kode sudah ada", "Data tidak lengkap"},
        {"Success", "Can not process", "Code exist", "Data incomplete"}
    };
    private int start;
    private String msgString;
    private int language;
    private EmpReprimand reprimand;
    private PstEmpReprimand pstReprimand;
    private FrmEmpReprimand frmReprimand;    
    
    public CtrlEmpReprimand(HttpServletRequest request) {
        msgString = "";        
        language = LANGUAGE_DEFAULT;
        reprimand = new EmpReprimand();
        
        try {
            pstReprimand = new PstEmpReprimand(0);
        } catch (Exception e) {
        }
        
        frmReprimand = new FrmEmpReprimand(request, reprimand);
    }
    
    public int getStart() {
        return start;
    }
    
    public String getMessage() {
        return msgString;
    }
    
    public EmpReprimand getEmpReprimand() {
        return reprimand;
    }
    
    public FrmEmpReprimand getForm() {
        return frmReprimand;
    }
    
    public int getLanguage() {
        return language;
    }
    
    public void setLanguage(int language) {
        this.language = language;
    }
    
    private String getSystemMessage(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                frmReprimand.addError(frmReprimand.FRM_FIELD_EMPLOYEE_ID, resultText[language][RSLT_EST_CODE_EXIST]);
                return resultText[language][RSLT_EST_CODE_EXIST];
            default:
                return resultText[language][RSLT_UNKNOWN_ERROR];            
        }
    }
    
    private int getControlMsgId(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                return RSLT_EST_CODE_EXIST;
            default:
                return RSLT_UNKNOWN_ERROR;
        }
    }
    
    public int action(int cmd, long oid, HttpServletRequest request, String loginName, long userId) {
        msgString = "";
        int excCode = I_DBExceptionInfo.NO_EXCEPTION;
        int rsCode = RSLT_OK;
        int sysLog = Integer.parseInt(String.valueOf(PstSystemProperty.getPropertyLongbyName("SET_USER_ACTIVITY_LOG")));
        //long sysLog = 1;
        String logField = "";
        String logPrev = "";
        String logCurr = "";
        Date nowDate = new Date();
        AppUser appUser = new AppUser();
        Employee emp = new Employee();
        try {
            appUser = PstAppUser.fetch(userId);
            emp = PstEmployee.fetchExc(appUser.getEmployeeId());
        } catch(Exception e){
            System.out.println("Get AppUser: userId");
        }
        
        switch (cmd) {
            case Command.ADD:
                break;
            
            case Command.EDIT:
                if (oid != 0) {
                    try {
                        reprimand = PstEmpReprimand.fetchExc(oid);
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {                        
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;
            
            
            
            case Command.SAVE:
                EmpReprimand prevEmpReprimand = null;
                if (oid != 0) {
                    try {
                        reprimand = PstEmpReprimand.fetchExc(oid);
                        
                        if (sysLog == 1) {
                            prevEmpReprimand = PstEmpReprimand.fetchExc(oid);
                        }
                        
                    } catch (Exception exc) {
                    }
                }
                
                frmReprimand.requestEntityObject(reprimand);
                
                if (frmReprimand.errorSize() > 0) {
                    msgString = FRMMessage.getMsg(FRMMessage.MSG_INCOMPLATE);
                    return RSLT_FORM_INCOMPLETE;
                }
                
                if (reprimand.getOID() == 0) {    // insert
                    try {
                        long result = pstReprimand.insertExc(this.reprimand);
                        if (sysLog == 1){
                            
                            String className = reprimand.getClass().getName();
                            LogSysHistory logSysHistory = new LogSysHistory();
                            
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + reprimand.getOID();
                            /* Lakukan set data ke entity logSysHistory */
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("ADD"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            /* Inisialisasi logField dengan menggambil field EmpEducation */
                            /* Tips: ambil data field dari persistent */
                            
                            logField = PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMPLOYEE_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_NUMBER]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_CHAPTER]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_ARTICLE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_PAGE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DESCRIPTION]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REP_DATE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VALIDITY]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_LEVEL_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_COMPANY_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DIVISION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DEPARTMENT_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_SECTION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_POSITION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_LEVEL_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMP_CATEGORY_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VERSE]+";";
                            
                            
                            /* data logField yg telah terisi kemudian digunakan untuk setLogDetail */
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0); /* 0 == draft */
                            /* inisialisasi value, yaitu logCurr */
                            logCurr = ""+reprimand.getOID()+";";
                            logCurr += ""+reprimand.getEmployeeId()+";";
                            logCurr += ""+reprimand.getReprimandNumber()+";";
                            logCurr += ""+reprimand.getChapter()+";";
                            logCurr += ""+reprimand.getArticle()+";";
                            logCurr += ""+reprimand.getPage()+";";
                            logCurr += ""+reprimand.getDescription()+";";
                            logCurr += ""+reprimand.getReprimandDate()+";";
                            logCurr += ""+reprimand.getValidityDate()+";";
                            logCurr += ""+reprimand.getReprimandLevelId()+";";
                            logCurr += ""+reprimand.getCompanyId()+";";
                            logCurr += ""+reprimand.getDivisionId()+";";
                            logCurr += ""+reprimand.getDepartmentId()+";";
                            logCurr += ""+reprimand.getSectionId()+";";
                            logCurr += ""+reprimand.getPositionId()+";";
                            logCurr += ""+reprimand.getLevelId()+";";
                            logCurr += ""+reprimand.getEmpCategoryId()+";";
                            logCurr += ""+reprimand.getVerse()+";";
                            
                            /* data logCurr yg telah diinisalisasi kemudian dipakai untuk set ke logPrev, dan logCurr */
                            logSysHistory.setLogPrev(logCurr);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogModule("Employee Reprimand"); /* nama sub module*/
                            /* data struktur perusahaan didapat dari pengguna yang login melalui AppUser */
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            /* mencatat item yang diedit */
                            logSysHistory.setLogEditedUserId(reprimand.getEmployeeId());
                            /* setelah di set maka lakukan proses insert ke table logSysHistory */
                            PstLogSysHistory.insertExc(logSysHistory);                            
                            }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                        return getControlMsgId(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                        return getControlMsgId(I_DBExceptionInfo.UNKNOWN);
                    }
                    
                } else {                      // update
                    try {
                        long result = pstReprimand.updateExc(this.reprimand);

                        // logHistory
                        if (sysLog == 1) {
                            reprimand = PstEmpReprimand.fetchExc(oid);
                            
                            logField = PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMPLOYEE_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_NUMBER]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_CHAPTER]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_ARTICLE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_PAGE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DESCRIPTION]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REP_DATE]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VALIDITY]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_LEVEL_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_COMPANY_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DIVISION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DEPARTMENT_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_SECTION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_POSITION_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_LEVEL_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMP_CATEGORY_ID]+";";
                            logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VERSE]+";";
                            
                            logCurr = ""+reprimand.getOID()+";";
                            logCurr += ""+reprimand.getEmployeeId()+";";
                            logCurr += ""+reprimand.getReprimandNumber()+";";
                            logCurr += ""+reprimand.getChapter()+";";
                            logCurr += ""+reprimand.getArticle()+";";
                            logCurr += ""+reprimand.getPage()+";";
                            logCurr += ""+reprimand.getDescription()+";";
                            logCurr += ""+reprimand.getReprimandDate()+";";
                            logCurr += ""+reprimand.getValidityDate()+";";
                            logCurr += ""+reprimand.getReprimandLevelId()+";";
                            logCurr += ""+reprimand.getCompanyId()+";";
                            logCurr += ""+reprimand.getDivisionId()+";";
                            logCurr += ""+reprimand.getDepartmentId()+";";
                            logCurr += ""+reprimand.getSectionId()+";";
                            logCurr += ""+reprimand.getPositionId()+";";
                            logCurr += ""+reprimand.getLevelId()+";";
                            logCurr += ""+reprimand.getEmpCategoryId()+";";
                            logCurr += ""+reprimand.getVerse()+";";
                            
                            logPrev = ""+prevEmpReprimand.getOID()+";";
                            logPrev += ""+prevEmpReprimand.getEmployeeId()+";";
                            logPrev += ""+prevEmpReprimand.getReprimandNumber()+";";
                            logPrev += ""+prevEmpReprimand.getChapter()+";";
                            logPrev += ""+prevEmpReprimand.getArticle()+";";
                            logPrev += ""+prevEmpReprimand.getPage()+";";
                            logPrev += ""+prevEmpReprimand.getDescription()+";";
                            logPrev += ""+prevEmpReprimand.getReprimandDate()+";";
                            logPrev += ""+prevEmpReprimand.getValidityDate()+";";
                            logPrev += ""+prevEmpReprimand.getReprimandLevelId()+";";
                            logPrev += ""+prevEmpReprimand.getCompanyId()+";";
                            logPrev += ""+prevEmpReprimand.getDivisionId()+";";
                            logPrev += ""+prevEmpReprimand.getDepartmentId()+";";
                            logPrev += ""+prevEmpReprimand.getSectionId()+";";
                            logPrev += ""+prevEmpReprimand.getPositionId()+";";
                            logPrev += ""+prevEmpReprimand.getLevelId()+";";
                            logPrev += ""+prevEmpReprimand.getEmpCategoryId()+";";
                            logPrev += ""+prevEmpReprimand.getVerse()+";";
                                
                            String className = reprimand.getClass().getName();
                                
                            LogSysHistory logSysHistory = new LogSysHistory();
                                
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + reprimand.getEmployeeId();
                                
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("EDIT"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0);
                            logSysHistory.setLogPrev(logPrev);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogModule("Employee Reprimand");
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            logSysHistory.setLogEditedUserId(reprimand.getEmployeeId());

                            PstLogSysHistory.insertExc(logSysHistory);
                            }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);                        
                    }
                    
                }
                break;
            
            
            case Command.ASK:
                if (oid != 0) {
                    try {                        
                        msgString = FRMMessage.getMessage(FRMMessage.MSG_ASKDEL);
                        reprimand = PstEmpReprimand.fetchExc(oid);
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {                        
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;
            
            case Command.DELETE:
                if (oid != 0) {
                    try {
                        reprimand = PstEmpReprimand.fetchExc(oid);
                        
                        logField = PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMPLOYEE_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_NUMBER]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_CHAPTER]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_ARTICLE]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_PAGE]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DESCRIPTION]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REP_DATE]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VALIDITY]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_REPRIMAND_LEVEL_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_COMPANY_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DIVISION_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_DEPARTMENT_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_SECTION_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_POSITION_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_LEVEL_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_EMP_CATEGORY_ID]+";";
                        logField += PstEmpReprimand.fieldNames[PstEmpReprimand.FLD_VERSE]+";";
                            
                        logPrev = ""+reprimand.getOID()+";";
                        logPrev += ""+reprimand.getEmployeeId()+";";
                        logPrev += ""+reprimand.getReprimandNumber()+";";
                        logPrev += ""+reprimand.getChapter()+";";
                        logPrev += ""+reprimand.getArticle()+";";
                        logPrev += ""+reprimand.getPage()+";";
                        logPrev += ""+reprimand.getDescription()+";";
                        logPrev += ""+reprimand.getReprimandDate()+";";
                        logPrev += ""+reprimand.getValidityDate()+";";
                        logPrev += ""+reprimand.getReprimandLevelId()+";";
                        logPrev += ""+reprimand.getCompanyId()+";";
                        logPrev += ""+reprimand.getDivisionId()+";";
                        logPrev += ""+reprimand.getDepartmentId()+";";
                        logPrev += ""+reprimand.getSectionId()+";";
                        logPrev += ""+reprimand.getPositionId()+";";
                        logPrev += ""+reprimand.getLevelId()+";";
                        logPrev += ""+reprimand.getEmpCategoryId()+";";
                        logPrev += ""+reprimand.getVerse()+";";
                            
                        logCurr = "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        
                        String empName = PstEmployee.getEmployeeName(reprimand.getEmployeeId());
                        
                        long result = PstEmpReprimand.deleteExc(oid);
                        
                        if (sysLog == 1) {
                            
                            String className = reprimand.getClass().getName();
                            
                            LogSysHistory logSysHistory = new LogSysHistory();
                            
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + reprimand.getEmployeeId();
                            
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("DELETE"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0);
                            logSysHistory.setLogPrev(logPrev);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogModule("Employee Reprimand");
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            logSysHistory.setLogEditedUserId(reprimand.getEmployeeId());

                            PstLogSysHistory.insertExc(logSysHistory);
                            
                        }
                        
                        
                        if (result != 0) {
                            msgString = FRMMessage.getMessage(FRMMessage.MSG_DELETED);
                            excCode = RSLT_OK;
                        } else {
                            msgString = FRMMessage.getMessage(FRMMessage.ERR_DELETED);
                            excCode = RSLT_FORM_INCOMPLETE;
                        }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {                        
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
        }
        
        return rsCode;
    }
}
