/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dimata.harisma.form.masterdata;

import com.dimata.harisma.entity.admin.AppUser;
import com.dimata.harisma.entity.admin.PstAppUser;
import com.dimata.harisma.entity.employee.PstEmployee;
import com.dimata.harisma.entity.log.I_LogHistory;
import com.dimata.harisma.entity.log.LogSysHistory;
import com.dimata.harisma.entity.log.PstLogSysHistory;
import javax.servlet.http.*;
import com.dimata.util.*;
import com.dimata.util.lang.*;
import com.dimata.qdep.system.*;
import com.dimata.qdep.form.*;
import com.dimata.qdep.db.*;
import com.dimata.harisma.entity.masterdata.*;
import com.dimata.harisma.entity.employee.*;
import com.dimata.system.entity.PstSystemProperty;
import java.util.Date;

/*
 Description : Controll EmployeeCompetency
 Date : Tue Oct 06 2015
 Author : Hendra Putu
 */
public class CtrlEmployeeCompetency extends Control implements I_Language {

    public static int RSLT_OK = 0;
    public static int RSLT_UNKNOWN_ERROR = 1;
    public static int RSLT_EST_CODE_EXIST = 2;
    public static int RSLT_FORM_INCOMPLETE = 3;
    public static String[][] resultText = {
        {"Berhasil", "Tidak dapat diproses", "NoPerkiraan sudah ada", "Data tidak lengkap"},
        {"Succes", "Can not process", "Estimation code exist", "Data incomplete"}
    };
    private int start;
    private String msgString;
    private EmployeeCompetency entEmployeeCompetency;
    private PstEmployeeCompetency pstEmployeeCompetency;
    private FrmEmployeeCompetency frmEmployeeCompetency;
    int language = LANGUAGE_DEFAULT;

    public CtrlEmployeeCompetency(HttpServletRequest request) {
        msgString = "";
        entEmployeeCompetency = new EmployeeCompetency();
        try {
            pstEmployeeCompetency = new PstEmployeeCompetency(0);
        } catch (Exception e) {;
        }
        frmEmployeeCompetency = new FrmEmployeeCompetency(request, entEmployeeCompetency);
    }

    private String getSystemMessage(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                this.frmEmployeeCompetency.addError(frmEmployeeCompetency.FRM_FIELD_EMPLOYEE_COMP_ID, resultText[language][RSLT_EST_CODE_EXIST]);
                return resultText[language][RSLT_EST_CODE_EXIST];
            default:
                return resultText[language][RSLT_UNKNOWN_ERROR];
        }
    }

    private int getControlMsgId(int msgCode) {
        switch (msgCode) {
            case I_DBExceptionInfo.MULTIPLE_ID:
                return RSLT_EST_CODE_EXIST;
            default:
                return RSLT_UNKNOWN_ERROR;
        }
    }

    public int getLanguage() {
        return language;
    }

    public void setLanguage(int language) {
        this.language = language;
    }

    public EmployeeCompetency getEmployeeCompetency() {
        return entEmployeeCompetency;
    }

    public FrmEmployeeCompetency getForm() {
        return frmEmployeeCompetency;
    }

    public String getMessage() {
        return msgString;
    }

    public int getStart() {
        return start;
    }

    public int action(int cmd, long oidEmployeeCompetency, HttpServletRequest request, String loginName, long userId) {
        msgString = "";
        int excCode = I_DBExceptionInfo.NO_EXCEPTION;
        int rsCode = RSLT_OK;
        int sysLog = Integer.parseInt(String.valueOf(PstSystemProperty.getPropertyLongbyName("SET_USER_ACTIVITY_LOG")));
        //long sysLog = 1;
        String logField = "";
        String logPrev = "";
        String logCurr = "";
        Date nowDate = new Date();
        AppUser appUser = new AppUser();
        Employee emp = new Employee();
        try {
            appUser = PstAppUser.fetch(userId);
            emp = PstEmployee.fetchExc(appUser.getEmployeeId());
        } catch(Exception e){
            System.out.println("Get AppUser: userId");
        }
        switch (cmd) {
            case Command.ADD:
                break;

            case Command.SAVE:
                EmployeeCompetency prevEmployeeComp = null;
                if (oidEmployeeCompetency != 0) {
                    try {
                        entEmployeeCompetency = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                        
                        if(sysLog == 1){
                            prevEmployeeComp = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                            
                        }
                    } catch (Exception exc) {
                    }
                }

                frmEmployeeCompetency.requestEntityObject(entEmployeeCompetency);

                if (frmEmployeeCompetency.errorSize() > 0) {
                    msgString = FRMMessage.getMsg(FRMMessage.MSG_INCOMPLATE);
                    return RSLT_FORM_INCOMPLETE;
                }

                if (entEmployeeCompetency.getOID() == 0) {
                    try {
                        long oid = pstEmployeeCompetency.insertExc(this.entEmployeeCompetency);
                        if (sysLog == 1) {
                            String className = entEmployeeCompetency.getClass().getName();
                            LogSysHistory logSysHistory = new LogSysHistory();
                            
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + entEmployeeCompetency.getOID();
                            /* Lakukan set data ke entity logSysHistory */
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("ADD"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            /* Inisialisasi logField dengan menggambil field EmpEducation */
                            /* Tips: ambil data field dari persistent */
                            
                            logField = PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_COMP_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_COMPETENCY_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_LEVEL_VALUE]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_SPECIAL_ACHIEVEMENT]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_DATE_OF_ACHVMT]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_HISTORY]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_PROVIDER_ID]+";";
                            
                            
                            /* data logField yg telah terisi kemudian digunakan untuk setLogDetail */
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0); /* 0 == draft */
                            /* inisialisasi value, yaitu logCurr */
                            logCurr = ""+entEmployeeCompetency.getOID()+";";
                            logCurr += ""+entEmployeeCompetency.getEmployeeId()+";";
                            logCurr += ""+entEmployeeCompetency.getCompetencyId()+";";
                            logCurr += ""+entEmployeeCompetency.getLevelValue()+";";
                            logCurr += ""+entEmployeeCompetency.getSpecialAchievement()+";";
                            logCurr += ""+entEmployeeCompetency.getDateOfAchvmt()+";";
                            logCurr += ""+entEmployeeCompetency.getHistory()+";";
                            logCurr += ""+entEmployeeCompetency.getProviderId()+";";
                            /* data logCurr yg telah diinisalisasi kemudian dipakai untuk set ke logPrev, dan logCurr */
                            logSysHistory.setLogPrev(logCurr);
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogModule("Employee Competency"); /* nama sub module*/
                            /* data struktur perusahaan didapat dari pengguna yang login melalui AppUser */
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            /* mencatat item yang diedit */
                            logSysHistory.setLogEditedUserId(entEmployeeCompetency.getEmployeeId());
                            /* setelah di set maka lakukan proses insert ke table logSysHistory */
                            PstLogSysHistory.insertExc(logSysHistory);
                        }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                        return getControlMsgId(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                        return getControlMsgId(I_DBExceptionInfo.UNKNOWN);
                    }

                } else {
                    try {
                        long oid = pstEmployeeCompetency.updateExc(this.entEmployeeCompetency);
                        
                        // logHistory
                        if(sysLog == 1){
                            entEmployeeCompetency = PstEmployeeCompetency.fetchExc(oid);
                            
                            logField = PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_COMP_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_COMPETENCY_ID]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_LEVEL_VALUE]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_SPECIAL_ACHIEVEMENT]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_DATE_OF_ACHVMT]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_HISTORY]+";";
                            logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_PROVIDER_ID]+";";
                            
                            logCurr = ""+entEmployeeCompetency.getOID()+";";
                            logCurr += ""+entEmployeeCompetency.getEmployeeId()+";";
                            logCurr += ""+entEmployeeCompetency.getCompetencyId()+";";
                            logCurr += ""+entEmployeeCompetency.getLevelValue()+";";
                            logCurr += ""+entEmployeeCompetency.getSpecialAchievement()+";";
                            logCurr += ""+entEmployeeCompetency.getDateOfAchvmt()+";";
                            logCurr += ""+entEmployeeCompetency.getHistory()+";";
                            logCurr += ""+entEmployeeCompetency.getProviderId()+";";
                            
                            logPrev = ""+prevEmployeeComp.getOID()+";";
                            logPrev += ""+prevEmployeeComp.getEmployeeId()+";";
                            logPrev += ""+prevEmployeeComp.getCompetencyId()+";";
                            logPrev += ""+prevEmployeeComp.getLevelValue()+";";
                            logPrev += ""+prevEmployeeComp.getSpecialAchievement()+";";
                            logPrev += ""+prevEmployeeComp.getDateOfAchvmt()+";";
                            logPrev += ""+prevEmployeeComp.getHistory()+";";
                            logPrev += ""+prevEmployeeComp.getProviderId()+";";
                            
                            
                            String className = entEmployeeCompetency.getClass().getName();
                            LogSysHistory logSysHistory = new LogSysHistory();
                            
                            String reqUrl = request.getRequestURI().toString() + "?employee_oid=" + entEmployeeCompetency.getOID();
                            
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("EDIT"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]); // interface
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0); /* 0 == draft */
                            logSysHistory.setLogPrev(logCurr);
                            logSysHistory.setLogCurr(logPrev);
                            logSysHistory.setLogModule("Employee Competency"); /* nama sub module*/
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            logSysHistory.setLogEditedUserId(entEmployeeCompetency.getEmployeeId());
                            PstLogSysHistory.insertExc(logSysHistory);
                            
                        }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }

                }
                break;

            case Command.EDIT:
                if (oidEmployeeCompetency != 0) {
                    try {
                        entEmployeeCompetency = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            case Command.ASK:
                if (oidEmployeeCompetency != 0) {
                    try {
                        entEmployeeCompetency = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            case Command.DELETE:
                if (oidEmployeeCompetency != 0) {
                    try {
                        
                        EmployeeCompetency empCompetency = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_COMP_ID]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_EMPLOYEE_ID]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_COMPETENCY_ID]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_LEVEL_VALUE]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_SPECIAL_ACHIEVEMENT]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_DATE_OF_ACHVMT]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_HISTORY]+";";
                        logField += PstEmployeeCompetency.fieldNames[PstEmployeeCompetency.FLD_PROVIDER_ID]+";";
                        
                        /*prev*/
                        logPrev += ""+empCompetency.getOID()+";";
                        logPrev += ""+empCompetency.getEmployeeId()+";";
                        logPrev += ""+empCompetency.getCompetencyId()+";";
                        logPrev += ""+empCompetency.getLevelValue()+";";
                        logPrev += ""+empCompetency.getSpecialAchievement()+";";
                        logPrev += ""+empCompetency.getDateOfAchvmt()+";";
                        logPrev += ""+empCompetency.getHistory()+";";
                        logPrev += ""+empCompetency.getProviderId()+";";
                        
                        /*curr*/
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        logCurr += "-;";
                        } catch(Exception e){
                        System.out.println(e.toString());
                    }
                    try{
                        EmployeeCompetency empCompetency = PstEmployeeCompetency.fetchExc(oidEmployeeCompetency);
                        String empName = PstEmployee.getEmployeeName(entEmployeeCompetency.getEmployeeId());
                        
                        long oid = PstEmployeeCompetency.deleteExc(oidEmployeeCompetency);
                        
                        if(sysLog == 1){
                            
                            String className = entEmployeeCompetency.getClass().getName();

                            LogSysHistory logSysHistory = new LogSysHistory();

                            String reqUrl = request.getRequestURI().toString()+"?employee_oid="+empCompetency.getEmployeeId();
                            /*
                            if (entEmployeeCompetency.getCompetencyId() != 0) {
                                String nameComp = PstCompetency.getCompetencyName(entEmployeeCompetency.getCompetencyId());
                                logPrev += "COMPETENCY_ID=[" + entEmployeeCompetency.getCompetencyId() + "]" + nameComp + ";";
                            }
                            if (entEmployeeCompetency.getLevelValue() != 0) {
                                logPrev += "LEVEL_VALUE=" + entEmployeeCompetency.getLevelValue() + ";";
                            }
                            if (entEmployeeCompetency.getDateOfAchvmt() != null) {
                                logPrev += "DATE_OF_ACHVMT='" + entEmployeeCompetency.getDateOfAchvmt() + "';";
                            }
                            if (entEmployeeCompetency.getSpecialAchievement() != null) {
                                logPrev += "SPECIAL_ACHIEVEMENT='" + entEmployeeCompetency.getSpecialAchievement() + "';";
                            }
                            */
                            logSysHistory.setLogDocumentId(0);
                            logSysHistory.setLogUserId(userId);
                            logSysHistory.setApproverId(userId);
                            logSysHistory.setApproveDate(nowDate);
                            logSysHistory.setLogLoginName(loginName);
                            logSysHistory.setLogDocumentNumber("");
                            logSysHistory.setLogDocumentType(className); //entity
                            logSysHistory.setLogUserAction("DELETE"); // command
                            logSysHistory.setLogOpenUrl(reqUrl); // locate jsp
                            logSysHistory.setLogUpdateDate(nowDate);
                            logSysHistory.setLogApplication(I_LogHistory.SYSTEM_NAME[I_LogHistory.SYSTEM_HAIRISMA]);
                            logSysHistory.setLogDetail(logField); // apa yang dirubah
                            logSysHistory.setLogStatus(0); /* 0 == draft */
                            
                            logSysHistory.setLogCurr(logCurr);
                            logSysHistory.setLogPrev(logPrev);
                            logSysHistory.setLogModule("Employee Competency"); /* nama sub module*/
                            /* data struktur perusahaan didapat dari pengguna yang login melalui AppUser */
                            logSysHistory.setCompanyId(emp.getCompanyId());
                            logSysHistory.setDivisionId(emp.getDivisionId());
                            logSysHistory.setDepartmentId(emp.getDepartmentId());
                            logSysHistory.setSectionId(emp.getSectionId());
                            /* mencatat item yang diedit */
                            logSysHistory.setLogEditedUserId(entEmployeeCompetency.getEmployeeId());
                            /* setelah di set maka lakukan proses insert ke table logSysHistory */
                            PstLogSysHistory.insertExc(logSysHistory);
                            
                        }
                        
                        if (oid != 0) {
                            msgString = FRMMessage.getMessage(FRMMessage.MSG_DELETED);
                            excCode = RSLT_OK;
                        } else {
                            msgString = FRMMessage.getMessage(FRMMessage.ERR_DELETED);
                            excCode = RSLT_FORM_INCOMPLETE;
                        }
                    } catch (DBException dbexc) {
                        excCode = dbexc.getErrorCode();
                        msgString = getSystemMessage(excCode);
                    } catch (Exception exc) {
                        msgString = getSystemMessage(I_DBExceptionInfo.UNKNOWN);
                    }
                }
                break;

            default:

        }
        return rsCode;
    }
}
